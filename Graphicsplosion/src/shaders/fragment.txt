#version 330 core

out vec3 color;

in vec3 fragColour;
in vec2 fragUv;
in vec3 fragNormal;
in vec3 fragShadowPosition;
in vec3 viewDirection;

uniform sampler2D textureSampler;
uniform sampler2D shadowSampler;

uniform int isShadowEnabled;

uniform vec3 directionalLightDirection;

void main()
{
	// Basic texturing with vertex colours
	color = fragColour * texture(textureSampler, fragUv).xyz;

	// Specular lighting
	vec3 halfWay = normalize(directionalLightDirection + viewDirection);
	float specularPower = 7.0f;
	float nDoth = clamp(pow(dot(fragNormal, halfWay), specularPower), 0.0f, 1.0f);

	color += vec3(0.8f, 0.8f, 0.8f) * nDoth;

	if (isShadowEnabled == 1) {
		// Add shadowing
		float minBias = 0.05f, maxBias = 0.08f;
		float shadeBrightness = 0.5f;

		if (lessThanEqual(fragShadowPosition.xy, vec2(1.0f)).xy == bvec2(true, true) && greaterThanEqual(fragShadowPosition.xy, vec2(0.0f)) == bvec2(true, true)) {
			color *= mix(shadeBrightness, 1.0f, clamp((texture(shadowSampler, fragShadowPosition.xy).x - fragShadowPosition.z + minBias) / (maxBias - minBias), 0.0f, 1.0f));
		}
	}
}