#version 330 core

out vec3 color;

in vec3 fragColour;
in vec2 fragUv;
in vec3 fragNormal;
in vec3 fragShadowPosition;
in vec3 viewDirection;

uniform sampler2D textureSampler;
uniform sampler2D shadowSampler;

uniform vec3 directionalLightDirection;

void main()
{
	// Basic texturing with vertex colours
	color = fragColour * texture(textureSampler, fragUv).xyz;

	// Specular lighting
	vec3 halfWay = normalize(directionalLightDirection + viewDirection);
	float specularPower = 7.0f;
	float nDoth = clamp(pow(dot(fragNormal, halfWay), specularPower), 0.0f, 1.0f);

	color += vec3(0.8f, 0.8f, 0.8f) * nDoth;

	// Add shadowing
	float minBias = 0.05f, maxBias = 0.08f;

	/*float bias = clamp(0.01f / abs(dot(fragNormal, directionalLightDirection)), 0.0f, 0.01f);
	
	if (fragShadowPosition.z >= texture(shadowSampler, fragShadowPosition.xy).x + bias) {
		color = vec3(0.0f, 0.0f, 0.0f);
	}*/

	color *= vec3(clamp((texture(shadowSampler, clamp(fragShadowPosition.xy, 0.0f, 1.0f)).x - fragShadowPosition.z + minBias) / (maxBias - minBias), 0.0f, 1.0f));
}