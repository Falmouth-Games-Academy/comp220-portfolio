#version 330 core

layout(location = 0) in vec3 vertexPos;
layout(location = 1) in vec3 vertexColour;
layout(location = 2) in vec2 vertexUv;
out vec3 fragColour;
out vec2 fragUv;

uniform mat4 matWorld; // the global transformation matrix
uniform mat4 matViewProj;  // the global view matrix
uniform float time; // global time

void main()
{
	gl_Position =  matViewProj * matWorld * vec4(vertexPos, 1); // matrix needs to be multiplied from the left?

	/*mat2 derp;
	float timeScale = 4.0f;
	float s = (sin(time * timeScale) + 1.0f) / 2.0f, c = (cos(time * timeScale) + 1.0f) / 2.0f;
	derp[0] = vec2(c, s);
	derp[1] = vec2(1.0f-s, c);
	vertexColourFrag.xy = derp * gl_Position.xy;
	vertexColourFrag.z = s;*/

	fragUv = vertexUv;
	fragColour = vertexColour;
	//fragUv = gl_Position.xy;
}